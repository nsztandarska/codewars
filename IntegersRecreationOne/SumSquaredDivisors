/*
1, 246, 2, 123, 3, 82, 6, 41 are the divisors of number 246. Squaring these divisors we get: 1, 60516, 4, 15129, 9, 6724, 36, 1681. 
The sum of these squares is 84100 which is 290 * 290.

Task
Find all integers between m and n (m and n integers such as 1 <= m <= n) such that the sum of their squared divisors is itself a square.

We will return an array of subarrays or of tuples (in C an array of Pair) or a string. The subarrays (or tuples or Pairs) will have two elements: 
first the number the squared divisors of which is a square and then the sum of the squared divisors.

Example:
list_squared(1, 250) --> [[1, 1], [42, 2500], [246, 84100]]
list_squared(42, 250) --> [[42, 2500], [246, 84100]]
*/

import java.util.Vector;

public class SumSquaredDivisors {

    public static String listSquared(long m, long n) {

        Vector result = new Vector();
        long baseSumDividers;
        boolean isPerfectSquare;

        while (m <= n) {
            baseSumDividers = sumDividers(m);
            isPerfectSquare = isSquare(baseSumDividers);

            if (isPerfectSquare) {
                Vector innerV = new Vector();
                innerV.addElement(m);
                innerV.addElement(baseSumDividers);
                result.addElement(innerV);
            }
            m++;
        }
        return result.toString();
    }

    private static long sumDividers(long digit) {

        long sumSquared = 0;
        for (int i = 1; i <= digit; i++) {
            if (digit % i == 0) {
                sumSquared += i * i;
            }
        }
        return sumSquared;
    }

    private static boolean isSquare(long digit) {

        double sq = Math.sqrt(digit);
        return ((sq - Math.floor(sq) == 0));
    }
}
